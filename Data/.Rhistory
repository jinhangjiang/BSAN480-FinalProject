Sys.getlocale()
assignment1 <- c(15,77,56,12,45,36,7,99,82,63)
mean(assignment1)
median(assignment1)
sd(assignment1)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("dplyr")
2^1.5
2^2
install.packages("pdftools")
install.packages(tm)
install.packages("tm")
install.packages("Rpoppler")
Sys.getenv()
Sys.getlocale()
Sys.setlocale("LC_ALL","English")
Sys.setlocale("LC_ALL","English")
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.getlocale()
?Sys.setlocale
Sys.getlocale(category = "LC_ALL")
Sys.setlocale(category = "LC_ALL", locale = "")
Sys.setlocale(category = "LC_ALL", locale = "en")
install.koRpus.lang("en")
# load the package
library(koRpus.lang.en)
install.koRpus.lang("en")
library(koRpus.lang.en)
Sys.setlocale(category = "LC_ALL", locale = "en")
install.packages("tm")
install.packages("qdap")
install.packages("wordcloud")
install.packages("wordcloud2")
install.packages("RColorBrewer")
######## set up all the packages
library(tokenizers)
library(tm)
library(rJava)
library(openNLP)
library(coreNLP)
require("NLP")
## must run this one first
initCoreNLP(type = "english", parameterFile = NULL,
mem = "2g")
####### load data
options(java.parameters = "- Xmx1024m")
load("workspaces/CSR_documents_30samples.RData")
initCoreNLP(type = "english", parameterFile = NULL,
mem = "2g")
## must run this one first
#options(java.parameters = "- Xmx1024m")
library(XLConnect)
## must run this one first
#options(java.parameters = "- Xmx1024m")
install.packages("XLConnect")
library(XLConnect)
initCoreNLP(type = "english", parameterFile = NULL,
mem = "2g")
## must run this one first
#options(java.parameters = "- Xmx1024m")
#install.packages("XLConnect")
#library(XLConnect)
initCoreNLP(type = "english", parameterFile = NULL,
mem = "8g")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
## generate data
x1<- rnrom(200)
library(tidyverse)
## generate data
x1<- rnrom(200)
## generate data
x1<- rnorm(200)
x2<- rnorm(200)
??rnorm
y<-  -2+1.5*x1-0.8*x2+rnorm(200)
dat<- data.frame(y,x1,x2)
## random split to training and testing
index<- sample(nrow(dat),0.8*nrow(dat))
train<- dat[index,]
test<- dat[-index,]
#GoHawks#2020
install.packages("odbc")
install.packages("Sleuth2")
library(Sleuth2)
head(ex1029)
model = lm(wage~Education+Experience+Black+SMSA+Region, data = ex1029)
model = lm(Wage~Education+Experience+Black+SMSA+Region, data = ex1029)
summary(model)
install.packages("alr3")
library(alr3)
fuel2001 <- fuel2001
View(fuel2001)
m1 = lm(fuel2001$FuelC~., data = fuel2001)
summary(m1)
par(mfrow = c(2, 2))
plot(m1)
remove_spots <- which(row.names(fuel2001) %in% c("FL","TX","NY"))
no_tx_fl_ny <- fuel2001[-remove_spots,]
new_model <- lm(FuelC ~ Tax + Drivers + Income + log(Miles,10), no_tx_fl_ny)
summary(new_model)
summary(m1)
attach(fuel2001)
m1 = lm(fuel2001$FuelC~Tax + Drivers + Income + log(Miles,10), data = fuel2001)
summary(m1)
par(mfrow = c(2, 2))
plot(m1)
hist(fuel2001$FuelC)
m2 <- lm(log(FuelC) ~ Tax + Drivers + Income + log(Miles,10), no_tx_fl_ny)
summary(m2)
m2 <- lm(log(FuelC,10) ~ Tax + Drivers + Income + log(Miles,10), no_tx_fl_ny)
summary(m2)
m2 <- lm(log(FuelC) ~ Tax + Drivers + Income + log(Miles,10), no_tx_fl_ny)
summary(m2)
exp(coefficients(m2))
plot(m2)
par(mfrow = c(2, 2))
plot(m2)
load("D:/1Github/CSRtm/workspaces/Specificity_Scores.RData")
house_data <- read.csv("http://www.lock5stat.com/datasets/HomesForSale.csv")
log_price <- log(house_data$Price, 10)
m1<- lm(log_price~Size+Beds, data = house_data)
summary(m1)
m2<- lm(log_price~Size+Beds+Baths, data = house_data)
summary(m2)
m3<- lm(log_price~Size+Beds+Baths+State, data = house_data)
summary(m1)
summary(m3)
anova(m1,m2)
anova(m2,m3)
AIC(m1,m2,m3)
help(state.x77)
state_data <- data.frame(state.x77)
state_data
pairs(state_data)
no_alaska <- state_data[-2,]
inter_model <- lm(Life.Exp ~1,no_alaska)
forward_model <- step(inter_model,direction = "forward",scope = (~Population+Income+Illiteracy+Murder+HS.Grad+Frost+Area))
final<-lm(Life.Exp ~ Murder + HS.Grad + Frost + Population, data = no_alaska)
summary(final)
setwd("D:/OneDrive - The University of Kansas/2020SPRING/BSAN480/BSAN480-FinalProject/Data")
movie<-read.csv("cleandata.csv")
a<-movie
a[,c("TITLE","RELEASE_DATE_TXT","PRODUCTION_COMPANIES",
"DIRECTOR_NAME","DIRECTOR_GENDER","ACTOR1_NAME",
"ACTOR1_GENDER","ACTOR2_NAME","ACTOR2_GENDER"
)]<-list(NULL)
rm(a)
rm(movie)
### find ROI
movie<-read.csv("modeldata.csv")
View(movie)
View(movie)
movie[,c("X","RELEVANCE_Mean")]<-NULL
movie$ROI<-(movie$REVENUE-movie$BUDGET)/movie$BUDGET
a<-movie[movie$STARTYEAR>=1990,]
coef(movie$REVENUE,movie$ROI)
coefficients(movie$REVENUE,movie$ROI)
coefficients(movie$REVENUE~movie$ROI)
a$ROI<-((a$REVENUE)-(a$BUDGET))/movie$BUDGET
a$ROI<-((a$REVENUE)-(a$BUDGET))/a$BUDGET
View(a)
coeff(a$REVENUE~a$ROI)
coef(a$REVENUE~a$ROI)
a[a$REVENUE==0]
a[a$REVENUE==0,]
a[which(a$REVENUE==0)]
a[a$REVENUE==0,]<-mean(a$REVENUE)
a[a$REVENUE==0]<-mean(a$REVENUE)
a<-movie[movie$STARTYEAR>=1990,]
a[a$REVENUE==0,]$REVENUE<-mean(a$REVENUE)
a<-movie[movie$STARTYEAR>=1990,]
a[a$REVENUE==0,]$REVENUE<-median(a$REVENUE)
median(a$REVENUE)
a[a$REVENUE==0,]$REVENUE<-median(a$REVENUE)
a[a$BUDGET==0,]$BUDGET<-mean(a$BUDGET)
a[a$REVENUE==0,]$REVENUE<-mean(a$REVENUE)
mean(a$BUDGET)
a$ROI<-((a$REVENUE)-(a$BUDGET))/a$BUDGET
coef(a$REVENUE~a$ROI)
coefficients(a$REVENUE~a$ROI)
a$ROI<-((a$REVENUE)-(a$BUDGET))/a$BUDGET
coefficients(a$REVENUE~a$ROI)
plot(a$ROI~a$REVENUE)
plot(a$ROI~a$REVENUE, type="l")
cor(a$ROI, a$REVENUE, method = "method")
cor(a$ROI, a$REVENUE, method = "pearson")
set.seed(2000)
index<-sample(nrow(a), 0.8*nrow(a))
a3.train <-a3[index,]
a3.test <-a3[-index,]
a3.train <-a[index,]
a3.test <-a[-index,]
null<-lm(a3.train$ROI~1, data = a3.train)
full<-lm(a3.train$ROI~., data = a3.train)
step(null, list(lower = null, upper = full), direction = c("both"))
View(a3.train)
a3.train <-a[index,-1]
a3.test <-a[-index,-1]
null<-lm(a3.train$ROI~1, data = a3.train)
full<-lm(a3.train$ROI~., data = a3.train)
step(null, list(lower = null, upper = full), direction = c("both"))
a3<-na.omit(a3)
a3<-na.omit(a)
a3.train <-a3[index,-1]
a3.test <-a3[-index,-1]
null<-lm(a3.train$ROI~1, data = a3.train)
full<-lm(a3.train$ROI~., data = a3.train)
step(null, list(lower = null, upper = full), direction = c("both"))
null<-lm(a3.train$ROI~1, data = a3.train)
full<-lm(a3.train$ROI~., data = a3.train)
step(null, list(lower = null, upper = full), direction = c("both"))
null<-lm(a3.train$ROI~1, data = a3.train)
full<-lm(a3.train$ROI~., data = a3.train)
step(null, list(lower = null, upper = full), direction = c("forward"))
step(null, list(lower = null, upper = full), direction = c("backward"))
fit4<-lm(a3.train$ROI~., data = a3.train)
summary(fit4)
View(movie)
a<-movie[movie$STARTYEAR>=1990,]
a[a$REVENUE==0,]<-NULL
a[a$REVENUE==0,]<-list(NULL)
a<-a[a$REVENUE!=0,]
a<-a[a$BUDGET!=0,]
a$ROI<-((a$REVENUE)-(a$BUDGET))/a$BUDGET
cor(a$ROI, a$REVENUE, method = "pearson")
set.seed(2000)
index<-sample(nrow(a), 0.8*nrow(a))
a3<-na.omit(a)
a3.train <-a3[index,-1]
a3.test <-a3[-index,-1]
null<-lm(a3.train$ROI~1, data = a3.train)
full<-lm(a3.train$ROI~., data = a3.train)
step(null, list(lower = null, upper = full), direction = c("backward"))
step(null, list(lower = null, upper = full), direction = c("both"))
fit4<-lm(formula = a3.train$ROI ~ documentary + budget_log + REVENUElog +
BUDGET + Actor1_Sex + REVENUE, data = a3.train)
summary(fit4)
fit4<-lm(formula = a3.train$ROI ~ documentary +
BUDGET + Actor1_Sex + REVENUE, data = a3.train)
summary(fit4)
a3$REVENUElog$<-NULL
a3$budget_log<-NULL
a3.train <-a3[index,-1]
a3.test <-a3[-index,-1]
a3$REVENUElog<-NULL
a3.train <-a3[index,-1]
a3.test <-a3[-index,-1]
null<-lm(a3.train$ROI~1, data = a3.train)
full<-lm(a3.train$ROI~., data = a3.train)
step(null, list(lower = null, upper = full), direction = c("both"))
fit4<-lm(formula = a3.train$ROI ~ documentary +
log(BUDGET) + Actor1_Sex + log(REVENUE), data = a3.train)
summary(fit4)
View(a3)
plot(fit4$res~fit4$fitted)
a3.train$stres=stdres(fit4)
library(leaps)
a3.train$stres=stdres(fit4)
?stdres
library(MASS)
a3.train$stres=stdres(fit4)
subset(a3.train, a3.train$stres>3)
subset(a3.train, a3.train$stres<-3)
subset(a3.train, a3.train$stres< -3)
fit4<-lm(formula = a3.train$ROI ~ documentary +
log(BUDGET) + Actor1_Sex + log(REVENUE), data = a3.train,
subset = subset(a3.train, a3.train$stres<3 & a3.train$stres> -3) )
subset(a3.train, a3.train$stres<3 & a3.train$stres> -3)
a3.train.subset<-subset(a3.train, a3.train$stres<3 & a3.train$stres> -3)
?lm()
fit4<-lm(formula = a3.train$ROI ~ documentary +
log(BUDGET) + Actor1_Sex + log(REVENUE), data = a3.train,
subset = a3.train.subset )
fit4<-lm(formula = a3.train$ROI ~ documentary +
log(BUDGET) + Actor1_Sex + log(REVENUE), data = a3.train.subset)
fit4<-lm(formula = ROI ~ documentary +
log(BUDGET) + Actor1_Sex + log(REVENUE), data = a3.train.subset)
summary(fit4)
fit4<-lm(formula = ROI ~ documentary +
log(BUDGET) + log(REVENUE), data = a3.train.subset)
summary(fit4)
plot(fit4$res~fit4$fitted)
hist(fit4$res)
AIC(fit)
AIC(fit4)
pred4<-predict(fit4, newdata = a3.test)
MSPE4<-mean((a3.test$ROI-pred1)^2)
MSPE4<-mean((a3.test$ROI-pred4)^2)
MSPE4
View(a3.test)
null<-lm(a3.train$ROI~1, data = a3.train.subset)
full<-lm(a3.train$ROI~., data = a3.train.subset)
null<-lm(ROI~1, data = a3.train.subset)
full<-lm(ROI~., data = a3.train.subset)
step(null, list(lower = null, upper = full), direction = c("both"))
fit4<-lm(formula = ROI ~ documentary + ML_RCOUNT + stres + NUMVOTESlog +
BUDGET + REVENUE + musical + VOTE_COUNT + comedy, data = a3.train.subset)
summary(fit4)
fit4<-lm(formula = ROI ~ documentary  + NUMVOTESlog +
BUDGET + REVENUE + musical + VOTE_COUNT + comedy, data = a3.train.subset)
summary(fit4)
fit4<-lm(formula = ROI ~ documentary  + NUMVOTESlog +
BUDGET + REVENUE + musical + VOTE_COUNT , data = a3.train.subset)
summary(fit4)
plot(fit4$res~fit4$fitted)
hist(fit4$res)
AIC(fit4)
pred4<-predict(fit4, newdata = a3.test)
MSPE4<-mean((a3.test$ROI-pred4)^2)
MSPE4
movie<-read.csv("cleandata.csv")
a<-movie
a[,c("TITLE","RELEASE_DATE_TXT","PRODUCTION_COMPANIES",
"DIRECTOR_NAME","DIRECTOR_GENDER","ACTOR1_NAME",
"ACTOR1_GENDER","ACTOR2_NAME","ACTOR2_GENDER"
)]<-list(NULL)
### average rating prediction
a1<-a
a1[,c("BUDGET","REVENUE","VOTE_COUNT","VOTE_AVERAGE",
"ML_RCOUNT","ML_RATING","PERFORMANCE", "RELEVANCE_MEAN")]<-list(NULL)
a1<-na.omit(a1)
View(a1)
a1[,c("BUDGET","REVENUE","VOTE_COUNT","VOTE_AVERAGE",
"ML_RCOUNT","ML_RATING","PERFORMANCE", "RELEVANCE_Mean")]<-list(NULL)
a1[,c("BUDGET","REVENUE","VOTE_COUNT","VOTE_AVERAGE",
"ML_RCOUNT","ML_RATING","PERFORMANCE", "RELEVANCE_Mean","X")]<-list(NULL)
a1<-na.omit(a1)
set.seed(1)
index<-sample(nrow(a1), 0.8*nrow(a1))
a1.train<-a1[index,-1]
a1.test<-a1[-index,-1]
null<-lm(a1.train$AVERAGERATING~1, data = a1.train)
full<-lm(a1.train$AVERAGERATING~., data = a1.train)
step(null, list(lower = null, upper = full), direction = c("both"))
fit<-lm(formula = a1.train$AVERAGERATING ~ STARTYEAR +
documentary + drama + horror + RELEVANCE_Mean_1 + sci.fi +
action + RUNTIME + NO_GENRE + NUMVOTESlog + Actor1_Sex +
budget_log + animation + NUMVOTES + REVENUElog + western +
adventure + film.noir + children + mystery + fantasy + romance,
data = a1.train)
summary(fit)
plot(fit$res~fit$fitted)
a1.train$stres=stdres(fit)
subset(a1.train, a1.train$stres>3)
subset(a1.train, a1.train$stres< -3)
a1.train.subset<-subset(a1.train, a1.train$stres<3 & a1.train$stres> -3)
fit<-lm(formula = AVERAGERATING ~ STARTYEAR +
documentary + drama + horror + RELEVANCE_Mean_1 + sci.fi +
action + RUNTIME + NO_GENRE + NUMVOTESlog + Actor1_Sex +
budget_log + animation + NUMVOTES + REVENUElog + western +
adventure + film.noir + children + mystery + fantasy + romance,
data = a1.train.subset)
summary(fit)
fit<-lm(formula = AVERAGERATING ~ STARTYEAR +
documentary + drama + horror + RELEVANCE_Mean_1 + sci.fi +
action + RUNTIME + NO_GENRE + NUMVOTESlog + Actor1_Sex +
budget_log + animation + NUMVOTES + REVENUElog + western +
adventure + film.noir,
data = a1.train.subset)
summary(fit)
plot(fit$res~fit$fitted)
a1.train.subset$stres=stdres(fit)
subset(a1.train.subset, a1.train.subset$stres>3)
subset(a1.train.subset, a1.train.subset$stres< -3)
a1.train.subset2<-subset(a1.train.subset, a1.train.subset$stres<3 & a1.train.subset$stres> -3)
fit<-lm(formula = AVERAGERATING ~ STARTYEAR +
documentary + drama + horror + RELEVANCE_Mean_1 + sci.fi +
action + RUNTIME + NO_GENRE + NUMVOTESlog + Actor1_Sex +
budget_log + animation + NUMVOTES + REVENUElog + western +
adventure + film.noir,
data = a1.train.subset2)
summary(fit)
plot(fit$res~fit$fitted)
hist(fit$res)
AIC(fit)
a1.train.subset2$stres=stdres(fit)
subset(a1.train.subset2, a1.train.subset2$stres>3)
subset(a1.train.subset2, a1.train.subset2$stres< -3)
a1.train.subset3<-subset(a1.train.subset2, a1.train.subset2$stres<3 & a1.train.subset2$stres> -3)
fit<-lm(formula = AVERAGERATING ~ STARTYEAR +
documentary + drama + horror + RELEVANCE_Mean_1 + sci.fi +
action + RUNTIME + NO_GENRE + NUMVOTESlog + Actor1_Sex +
budget_log + animation + NUMVOTES + REVENUElog + western +
adventure + film.noir,
data = a1.train.subset3)
summary(fit)
plot(fit$res~fit$fitted)
hist(fit$res)
AIC(fit)
pred1<-predict(fit, newdata = a1.test)
MSPE1<-mean((a1.test$AVERAGERATING-pred1)^2)
MSPE1
a1.train.subset3$stres=stdres(fit)
subset(a1.train.subset3, a1.train.subset3$stres>3)
subset(a1.train.subset3, a1.train.subset3$stres< -3)
a1.train.subset4<-subset(a1.train.subset3, a1.train.subset3$stres<3 & a1.train.subset3$stres> -3)
fit<-lm(formula = AVERAGERATING ~ STARTYEAR +
documentary + drama + horror + RELEVANCE_Mean_1 + sci.fi +
action + RUNTIME + NO_GENRE + NUMVOTESlog + Actor1_Sex +
budget_log + animation + NUMVOTES + REVENUElog + western +
adventure + film.noir,
data = a1.train.subset4)
summary(fit)
plot(fit$res~fit$fitted)
hist(fit$res)
AIC(fit)
pred1<-predict(fit, newdata = a1.test)
MSPE1<-mean((a1.test$AVERAGERATING-pred1)^2)
MSPE1
fit<-lm(formula = AVERAGERATING ~ STARTYEAR +
documentary + drama + horror + RELEVANCE_Mean_1 + sci.fi +
action + RUNTIME + NO_GENRE + NUMVOTESlog + Actor1_Sex +
budget_log + animation + NUMVOTES + REVENUElog + western +
adventure,
data = a1.train.subset4)
summary(fit)
plot(fit$res~fit$fitted)
hist(fit$res)
AIC(fit)
pred1<-predict(fit, newdata = a1.test)
MSPE1<-mean((a1.test$AVERAGERATING-pred1)^2)
MSPE1
a1.train.subset4$stres=stdres(fit)
subset(a1.train.subset4, a1.train.subset4$stres>3)
subset(a1.train.subset4, a1.train.subset4$stres< -3)
a1.train.subset5<-subset(a1.train.subset4, a1.train.subset4$stres<3 & a1.train.subset4$stres> -3)
fit<-lm(formula = AVERAGERATING ~ STARTYEAR +
documentary + drama + horror + RELEVANCE_Mean_1 + sci.fi +
action + RUNTIME + NO_GENRE + NUMVOTESlog + Actor1_Sex +
budget_log + animation + NUMVOTES + REVENUElog + western +
adventure,
data = a1.train.subset5)
summary(fit)
plot(fit$res~fit$fitted)
hist(fit$res)
AIC(fit)
qqplot(fit$res)
qqnorm(fit$res)
qqline(fit$res)
a1.train.subset5$stres=stdres(fit)
subset(a1.train.subset5, a1.train.subset5$stres>3)
subset(a1.train.subset5, a1.train.subset5$stres< -3)
a1.train.subset6<-subset(a1.train.subset5, a1.train.subset5$stres<3 & a1.train.subset5$stres> -3)
fit<-lm(formula = AVERAGERATING ~ STARTYEAR +
documentary + drama + horror + RELEVANCE_Mean_1 + sci.fi +
action + RUNTIME + NO_GENRE + NUMVOTESlog + Actor1_Sex +
budget_log + animation + NUMVOTES + REVENUElog + western +
adventure,
data = a1.train.subset6)
summary(fit)
plot(fit$res~fit$fitted)
hist(fit$res)
qqnorm(fit$res)
qqline(fit$res)
AIC(fit)
pred1<-predict(fit, newdata = a1.test)
MSPE1<-mean((a1.test$AVERAGERATING-pred1)^2)
MSPE1
a1.train.subset6$stres=stdres(fit)
subset(a1.train.subset6, a1.train.subset6$stres>3)
subset(a1.train.subset6, a1.train.subset6$stres< -3)
fit<-lm(formula = AVERAGERATING ~ STARTYEAR +
documentary + drama + horror + RELEVANCE_Mean_1 + sci.fi +
action + RUNTIME + NO_GENRE + NUMVOTESlog + Actor1_Sex +
budget_log + animation + NUMVOTES + REVENUElog + western +
adventure,
data = a1.train.subset6)
summary(fit)
plot(fit$res~fit$fitted)
hist(fit$res)
qqnorm(fit$res)
qqline(fit$res)
AIC(fit)
pred1<-predict(fit, newdata = a1.test)
MSPE1<-mean((a1.test$AVERAGERATING-pred1)^2)
MSPE1
